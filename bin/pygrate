#! /usr/bin/python

import pygration
import pygration.config
import pygration.history
import pygration.migration
import pygration.migrator
import sqlalchemy
import optparse
import os
import os.path
import sys
import types


PATH_HELP = "path to the pygration directory"


def print_usage():
    print "Usage:\n\tpygrate <command>"


def run_main():
    usage = "usage: %prog [options] <command>"
    parser = optparse.OptionParser( usage=usage )
    parser.add_option("-p", "--path", help=PATH_HELP)
    parser.add_option("-e", "--env")
    parser.add_option( "-v", "--verbose" )

    opts, args = parser.parse_args()

    opts.verbose = True
 
    if len(args) == 0:
        command = ''
    elif len(args) > 1:
        parser.error("Too many arguments")
    else:
        command = args[0]


    path = '.'
    if opts.path:
        path = opts.path

    # Put the path 
    sys.path.insert(0, os.path.abspath(path))

    if opts.verbose:
        print "Migration Directory = '%s'" % path

    # Config Loading Section #
    config_path = os.path.join(path, 'conf.d')
    conf_files = os.listdir(config_path)
    config_selection = pygration.config.select(conf_files, opts.env)
    config_selection = os.path.join(config_path, config_selection)
    print "Config File = '%s'" % config_selection
    conf = pygration.config.load(config_selection)
    if opts.verbose:
        print "Config Options = %s" % conf

    # Open SQLAlchemy DB Engine
    session = pygration.db.open(conf.connection, conf.schema)

    # MigrationSet #
    migration_set = pygration.migration.load(path)

    # History Section #
    history = pygration.history.load(session)

    migrator = pygration.migrator.Migrator(migration_set, history)

    migration_command_set = ['add', 'drop', 'commit']
    show_set = ['', 'next?', 'last?']
    if command in migration_command_set:
        migrator.migrate(command)
    elif command in show_set:
        migrator.show(command)
    else:
        print "Unknown command: %s" % command
        print_usage()
        exit(1)


if ( __name__ == "__main__" ):
    run_main()

